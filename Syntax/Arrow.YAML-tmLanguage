fileTypes:
- _
name: Arrow
patterns:
- include: '#keywords'
- match: \b(true|false)\b
  name: constant.language.arrow
- captures:
    '1':
      name: entity.name.function.arrow
  match: (?<=(?:def\s))([_A-Za-z][_A-Za-z0-9]*)
  name: function.arrow
- captures:
    '1':
      name: support.function.any-method.arrow
  match: (?<=(?:do ))([_A-Za-z][_A-Za-z0-9]*)
  name: function-call.arrow
- captures:
    '1':
      name: support.function.any-method.arrow
  match: ([_A-Za-z][_A-Za-z0-9]*)(?=\()
  name: function-call.arrow
- begin: '"'
  beginCaptures:
    '0':
      name: punctuation.definition.string.begin.arrow
  end: '"'
  endCaptures:
    '0':
      name: punctuation.definition.string.end.arrow
  name: string.quoted.double.arrow
  patterns:
  - include: '#string_escaped_char'
- begin: ''''
  beginCaptures:
    '0':
      name: punctuation.definition.string.begin.arrow
  end: ''''
  endCaptures:
    '0':
      name: punctuation.definition.string.end.arrow
  name: string.single.double.arrow
  patterns:
  - include: '#string_escaped_char'
- match: \@([_A-Za-z][_A-Za-z0-9]*)(?=\()
  name: meta.function.decorator.arrow
- match: (?<=(struct ))([_A-Za-z][_A-Za-z0-9]*)
  name: entity.name.type.struct.arrow
- match: \b(struct)\b
  name: storage.type.struct.arrow
- match: \b(self)\b
  name: variable.language.arrow
- match: (?<=(enum ))([_A-Za-z][_A-Za-z0-9]*)
  name: entity.name.type.enum.arrow
- match: \b(enum)\b
  name: storage.type.enum.arrow
- match: (?<=(trait ))([_A-Za-z][_A-Za-z0-9]*)
  name: entity.name.type.trait.arrow
- match: \b(trait)\b
  name: storage.type.trait.arrow
- match: \b(def)\b
  name: storage.type.function.arrow
- match: ([_A-Za-z][_A-Za-z0-9]*)(?=\:)
  name: variable.parameter.function.arrow
- include: '#numeric'
- include: '#operators'
- include: '#comments'
repository:
  keywords:
    patterns:
    - match: >
        (?x)\b(import|
               let|
               mut|
               for|
               in|
               do|
               foreign|
               as|
               and|
               or|
               not|
               if|
               else|
               use|
               public|
               private|
               type|
               match|
               static|
               unsafe|
               while|
               macro|
               loop|
               global|
               super|
               for|
               continue|
               break|
               return|
               implement|
               module)\b
      name: 'keyword.arrow'
    - match: >
        (?x)\b(bool|
               (u?int(8|16|32|64|128)?)|
               float(16|32|64|128)|
               str|
               char)\b
      name: 'support.type.arrow'
  comments:
    begin: '#'
    beginCaptures:
      '0':
        name: 'punctuation.definition.comment.arrow'
    end: '.*\n?'
    name: 'comment.line.arrow'
  numeric:
    patterns:
    - match: >
        (?x)\b((0[bB][0-1]+)|(0[oO][0-7]+)|
               (0[xX][A-Fa-f0-9]+)|([0-9]+\.[0-9]+([Ee][-+]?[0-9]+)?)|
               ([0-9]+([Ee][-+]?[0-9]+)?)|([0-9]+))\b
      name: 'constant.numeric.arrow'
  operators:
    patterns:
    - captures:
        '0':
          name: 'keyword.operator.arrow'
      match: >
        (?x)(=|
            \+=|
            -=|
            ->|
            \+|
            -|
            :|
            &|
            ^|
            %|
            \*|
            ==|
            >=|
            <=|
            >|
            <|
            \^|
            \)|
            \(|
            ;|
            \[|
            \]|
            ,|
            !|
            \||
            \.|
            \/|
            \{|
            \}|)
      name: assignment.operators.arrow
  string_escaped_char:
    patterns:
    - match: (\\['"\\abfnrtv])|(\\[xX][a-fA-F0-9]{2})|(\\u[a-fA-F0-9]{4})|(\\U[a-fA-F0-9]{8})
      name: constant.character.escape.arrow
    - match: \\.
      name: invalid.illegal.unknown-escape.arrow
scopeName: source.arrow
uuid: 25066DC2-6B1D-11D9-9D5B-000D93589AF6
